name: build

on: [push, pull_request]

env:
  BRANCH: ${{ github.ref_name }}
  DEPENDENCIES: cryptopp cimg curl libpng nlohmann-json
  VERSION: "0.1.0"
  WORKSPACE: ${{ github.workspace }}

jobs:
  build:
    runs-on: ${{ matrix.os }}

    permissions:
      contents: write

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies (Win)
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        .\vcpkg\vcpkg integrate install
        .\vcpkg\vcpkg install ${{ env.DEPENDENCIES }}
    
    - name: Install dependencies (Linux)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/vcpkg integrate install
          ./vcpkg/vcpkg install ${{ env.DEPENDENCIES }}

    - name: Increment Version
      shell: python
      run: |
        import os
        import pathlib
        import re
        import subprocess

        branch = os.getenv("BUILD_BRANCH", "").split("/")[0]
        try:
            latest_tag = subprocess.check_output('git describe --abbrev=0 --tags', universal_newlines=True)
        except subprocess.CalledProcessError:
            version = '0.1.0'
        else:
            version = re.search(pattern='v(?P<version>(\d+[.])+\d+)', string=latest_tag)
            major, minor, patch = version['version'].split('.')
            if branch.isdigit():
                patch = str(int(patch) + 1)
            else:
                minor = str(int(minor) + 1)
            version = ".".join([major, minor, patch])
        os.environ["VERSION"] = version

    - name: Configure CMake
      run: cmake -Bbuild

    - name: Build
      run: cmake --build build --config Release
     
    - name: Archive dist artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build
        if-no-files-found: error
        path: |
            build/Release/LicClient.dll

    - name: Publish Release
      if: ${{ github.event_name == 'push' && github.ref_name == 'master'}}
      uses: softprops/action-gh-release@v1
      with:
        files: build/Release/LicClient.dll
        generate_release_notes: true
        name: LicenseClient_v${{ env.VERSION }}
        prerelease: true
        tag_name: v${{ env.VERSION }}

